<UserControl x:Class="PGYMiniCooper.CoreModule.View.Protocols.I2CProtocolView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PGYMiniCooper.CoreModule.View.Protocols"  
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"    
             xmlns:behavior="clr-namespace:ProdigyFramework.Behavior;assembly=ProdigyFramework"
             xmlns:dataModule="clr-namespace:PGYMiniCooper.DataModule;assembly=PGYMiniCooper.DataModule"  
                 xmlns:toolkit="http://schemas.microsoft.com/wpf/2008/toolkit"
                xmlns:conv="clr-namespace:PGYMiniCooper.CoreModule.View.Converters"
                xmlns:vm="clr-namespace:PGYMiniCooper.DataModule.Structure;assembly=PGYMiniCooper.DataModule"
             xmlns:viewmodel="clr-namespace:PGYMiniCooper.DataModule;assembly=PGYMiniCooper.DataModule"
             xmlns:custom="clr-namespace:PGYMiniCooper.CoreModule.View.CustomView"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes" 

          xmlns:vm1="clr-namespace:PGYMiniCooper.CoreModule.ViewModel.ProtocolViewModel"
             xmlns:pvmi="clr-namespace:PGYMiniCooper.CoreModule.ViewModel.Interfaces"
          
             d:DataContext="{d:DesignInstance vm1:ResultViewModel_I2C, IsDesignTimeCreatable=False}"
         
             mc:Ignorable="d" x:Name="parent"
             d:DesignHeight="300" d:DesignWidth="300">
    <UserControl.Resources>

        <ControlTemplate x:Key="validationErrorTemplate">
            <DockPanel>
                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                    <Grid Width="12" Height="12">
                        <Ellipse Width="12" Height="12"  Fill="Red" HorizontalAlignment="Center"   VerticalAlignment="Center" ></Ellipse>
                        <TextBlock Foreground="White" FontWeight="Heavy"  FontSize="8" HorizontalAlignment="Center"  VerticalAlignment="Center" TextAlignment="Center" 
                                   ToolTip="{Binding ElementName=ErrorAdorner,Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">X</TextBlock>
                    </Grid>
                    <TextBlock Foreground="Red" FontWeight="SemiBold" Margin="2,0,0,0" 
                   Text="{Binding ElementName=ErrorAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"></TextBlock>
                </StackPanel>
                <AdornedElementPlaceholder x:Name="ErrorAdorner" ></AdornedElementPlaceholder>
            </DockPanel> 
        </ControlTemplate>
        <DataTemplate x:Key="i2cdatatemplate"  DataType="{x:Type vm1:ResultViewModel_I2C}">
            <Border BorderThickness="0" Background="#FFF2FAFF" Padding="10"  >
                <ScrollViewer VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                    <UniformGrid>
                        <TextBox Style="{x:Null}" FontSize="14" BorderThickness="0" IsReadOnly="True" MaxHeight="140" FontFamily="Courier New" Foreground="DarkBlue" MaxWidth="900" TextWrapping="Wrap" Text="{Binding DataBytes,Converter={StaticResource customDataConverter}}" VerticalAlignment="Center" />
                    </UniformGrid>
                </ScrollViewer>
            </Border>
        </DataTemplate>
        <Style TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="Height" Value="25"/>
            <Setter Property="Background" Value="#03a9f4" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        </Style>
        <Style TargetType="{x:Type DataGridRow}">
            <Setter Property="Background" Value="#FFEDF9FD" />
            <Setter Property="FontWeight" Value="Normal"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Orange"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="#3F66EC"/>
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
                <DataTrigger Binding="{Binding IsHighlighted}" Value="True">
                    <Setter Property="Background" Value="Yellow"></Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
         
            <RowDefinition Height="*"></RowDefinition>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <!--Border1-->
        <Border x:Name="serachfilter" Background="#59ABE3" BorderThickness="1" Grid.Row="0"  Margin="1"
         Visibility="{Binding BorderVisibility, Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=Collapsed}" >
            <ScrollViewer
              VerticalScrollBarVisibility="Auto"
              HorizontalScrollBarVisibility="Auto">

                <Grid DataContext="{Binding SearchParameter}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="2*"/>
                    </Grid.RowDefinitions>

                    <WrapPanel  Grid.Column="0" Grid.Row="0" Margin="2,5,2,5">
                        <StackPanel Orientation="Horizontal" x:Name="wrap" >
                            <RadioButton Content="Search"   x:Name="searchinbtn" IsChecked="{Binding SearchMode, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static pvmi:SearchMode.Search}}" Margin="2" GroupName="x"></RadioButton>
                            <RadioButton Content="Filterin"  x:Name="filterinbtn"  IsChecked="{Binding SearchMode, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static pvmi:SearchMode.Filter_In}}" Margin="2"  GroupName="x"></RadioButton>
                            <RadioButton Content="Filterout"   x:Name="filteroutbtn"  IsChecked="{Binding SearchMode, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static pvmi:SearchMode.Filter_Out}}" Margin="2"  GroupName="x"></RadioButton>
                            <StackPanel.Style>
                                <Style TargetType="{x:Type StackPanel}">
                                    <Setter Property="IsEnabled" Value="True" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsSearchActive}" Value="True">
                                            <Setter Property="IsEnabled" Value="False"  />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsFilterActive}" Value="True">
                                            <Setter Property="IsEnabled" Value="False"  />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                        </StackPanel>
                        <!--search-->
                        <Button    BorderThickness="0" Background="#59ABE3" Margin="30,2,2,2" Command="{Binding SearchCommand}" ToolTip="Search Button to Search, FilterIn or FilterOut">

                            <materialDesign:PackIcon Kind="DatabaseSearch" Foreground="Black" FontWeight="ExtraBlack"  Height="20" Width="20"/>

                            <!--<Button.Resources>
                                <Style TargetType="Border">
                                    <Setter Property="CornerRadius" Value="3"/>
                                </Style>
                            </Button.Resources>-->
                        </Button>

                        <!--Reset-->
                        <Button   Margin="5,2,5,2" Background="#59ABE3" BorderThickness="0" ToolTip="Reset" Command="{Binding ResetCommand}" Height="22" Width=" 20">

                            <materialDesign:PackIcon Kind="Restart" Foreground="Black" FontWeight="Bold" Height="20" Width=" 20"  />


                        </Button>


                        <!--previous-->
                        <Button ToolTip="Search Previous" BorderThickness="0"  Background="#59ABE3" Command="{Binding PreviousCommand}" Margin="4,1,0,0" 
                            IsEnabled="{Binding IsSearchActive}">
                            <materialDesign:PackIcon Kind="SkipPreviousCircle" Height="20" Width=" 20" FontWeight="Medium" />
                            <!--<Button.Resources>
                                <Style TargetType="Border">
                                    <Setter Property="CornerRadius" Value="9"/>
                                </Style>
                            </Button.Resources>-->
                        </Button>




                        <!--next-->
                        <Button ToolTip="Search Next" BorderThickness="0"    Background="#59ABE3" Command="{Binding NextCommand}" Margin="0,1,0,0" 
                            IsEnabled="{Binding IsSearchActive}">
                            <materialDesign:PackIcon Kind="SkipNextCircle" Height="20" Width=" 20"  FontWeight="Medium"/>
                            <!--<Button.Resources>
                                <Style TargetType="Border">
                                    <Setter Property="CornerRadius" Value="9"/>
                                </Style>
                            </Button.Resources>-->
                        </Button>

                    </WrapPanel>

                    <!--border2-->
                    <Border x:Name="enable" Grid.Row="1" Background="AliceBlue"  BorderThickness="1" BorderBrush="#eab676">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="IsEnabled" Value="True" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsSearchActive}" Value="True">
                                        <Setter Property="IsEnabled" Value="False"  />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsFilterActive}" Value="True">
                                        <Setter Property="IsEnabled" Value="False"  />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <StackPanel Orientation="Vertical" Margin="3">
                            <WrapPanel>
                                <RadioButton x:Name="start" Content="S"  Margin="2,0,5,5" IsChecked="{Binding StartSelected}"></RadioButton>
                                <RadioButton x:Name="rstart" Content="Sr" Margin="5,0,5,5" IsChecked="{Binding RepeatStartSelected}"></RadioButton>
                                <CheckBox x:Name="stop"  Content="Stop" Margin="15,0,5,5" IsChecked="{Binding StopSelected}"></CheckBox>
                            </WrapPanel>

                            <WrapPanel >
                                <Label Content="Addr" Margin="2,8,3,0"></Label>
                                <TextBox  x:Name="AddressBox" MaxLength="8" Width="50" Height="20" Margin="2,8,0,5"  HorizontalContentAlignment="Center" VerticalContentAlignment="Center"  
                                    Validation.ErrorTemplate="{StaticResource validationErrorTemplate}" >
                                    <Binding Path="Address"  Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <conv:PatternValidator>
                                                <conv:PatternValidator.Wrapper>
                                                    <conv:PatternValidatorWrapper PatternFormat="{Binding DataContext.PatternFormat, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
                                                </conv:PatternValidator.Wrapper>
                                            </conv:PatternValidator>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox>

                                <Label  Margin="5,8,2,2">
                                    <WrapPanel>
                                        <TextBlock>R/</TextBlock>
                                        <TextBlock TextDecorations="OverLine" >W</TextBlock>
                                    </WrapPanel>
                                </Label>
                                <ComboBox  x:Name="comboselect2"  Margin="0,8,4,5" SelectedItem="{Binding Transfertype}"/>
                                <Label Margin="4,8,2,2">
                                    <WrapPanel>
                                        <TextBlock>A/</TextBlock>
                                        <TextBlock TextDecorations="OverLine" >A</TextBlock>
                                    </WrapPanel>
                                </Label>
                                <ComboBox x:Name="comboselect1"  Margin="0,8,4,5"  SelectedItem="{Binding  ACKAdd}" ></ComboBox>
                            </WrapPanel>


                            <WrapPanel Margin="0,2,0,0">
                                <Label Content="Data" Margin="2,5,3,0" ></Label>

                                <TextBox   MaxLength="8" Width="50" Height="20" Margin="3,5,0,2"  HorizontalContentAlignment="Center" VerticalContentAlignment="Center"  
                                    
                                 Validation.ErrorTemplate="{StaticResource validationErrorTemplate}">
                                    <Binding Path="Data" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <conv:PatternValidator>
                                                <conv:PatternValidator.Wrapper>
                                                    <conv:PatternValidatorWrapper PatternFormat="{Binding DataContext.PatternFormat, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
                                                </conv:PatternValidator.Wrapper>
                                            </conv:PatternValidator>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox>
                                <Label Margin="6,5,2,2">
                                    <WrapPanel>
                                        <TextBlock>A/</TextBlock>
                                        <TextBlock TextDecorations="OverLine" >A</TextBlock>
                                    </WrapPanel>
                                </Label>
                                <ComboBox x:Name="comboselect3" Margin="3,5.,5,5"  SelectedItem="{Binding  ACKData}"/>
                            </WrapPanel>
                        </StackPanel>
                    </Border>

                </Grid>
            </ScrollViewer>
        </Border>

        <!--<Grid  Grid.Row="1">

            -->
        <!--<GridSplitter Height="5"
                      ResizeBehavior="CurrentAndNext" />-->
        <!--<GridSplitter Grid.Row="1" Height="5"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch"   Visibility="{Binding  BorderVisibility,Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=Collapsed}" />-->
        <!--</Grid>-->
        <DataGrid Grid.Row="2"
                ItemsSource="{Binding SearchParameter.ResultView.View,IsAsync=True}"
                  IsSynchronizedWithCurrentItem="True"
                  SelectedIndex="0" 
                  SelectedItem="{Binding SelectedFrame,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
                  SelectionMode="Single"
                  CanUserSortColumns="False" HorizontalAlignment="Stretch"
                  CanUserDeleteRows="False"
                  RowDetailsVisibilityMode="Collapsed"
                  CanUserAddRows="False" HorizontalGridLinesBrush="#E9E3E3" VerticalGridLinesBrush="#E9E3E3"
                  conv:DataGridExtension.RowLoadedCommand="{Binding RowLoadedCommand}"
                  IsReadOnly="True"
                  x:Name="i2cgrid"
                  AutoGenerateColumns="False" 
                  RowHeaderWidth="25"
                  HeadersVisibility="All"
                  VirtualizingPanel.VirtualizationMode="Recycling"
                  VirtualizingPanel.IsVirtualizing="True"
                  VirtualizingPanel.ScrollUnit="Item"
                  VirtualizingPanel.CacheLengthUnit="Item"
                  VirtualizingPanel.CacheLength="10,10" 
                  ScrollViewer.IsDeferredScrollingEnabled="True"
            ScrollViewer.HorizontalScrollBarVisibility="Auto"
            Width="Auto"
            behavior:DataGridBehavior.AutoScrollIntoView="True">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectionChanged">
                    <i:InvokeCommandAction Command="{Binding SelectionCommand, Mode=OneWay}" CommandParameter="i2c"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <DataGrid.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#2A74D1"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="White"/>
                <Style TargetType="DataGridRowHeader">
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <MultiBinding Converter="{StaticResource objectComparerConverter}">
                                            <Binding Path="DataContext.WareHouse.TriggerPacket" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}"/>
                                            <Binding Path="FrameIndex"/>
                                        </MultiBinding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Content" Value="T"/>
                            <Setter Property="Foreground" Value="#256B0E"/>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.Resources>
            <DataGrid.Columns>
                <!--<DataGridTextColumn Header="Index" Binding="{Binding FrameIndex}" />-->
                <DataGridTextColumn Header="Time" MinWidth="60" Width="3*">
                    <DataGridTextColumn.Binding>
                        <MultiBinding Converter="{StaticResource timestampConverter}" StringFormat="{}{0:#}">
                            <Binding Path="StartTime" />
                            <Binding Path="DataContext.WareHouse.TriggerTime" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                        </MultiBinding>
                    </DataGridTextColumn.Binding>
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="ToolTip" Value="{Binding StartTime}" />
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
               
                <DataGridTextColumn Header="S/Sr" Binding="{Binding Start}" MinWidth="20" Width="*" />
                <DataGridTextColumn Header="Addr" Width="3*"  MinWidth="60">
                    <DataGridTextColumn.Binding>
                        <MultiBinding Converter="{StaticResource addressConverter}" StringFormat="{}0x{0:X}">
                            <Binding Path="AddressFirst" />
                            <Binding Path="AddressSecond"/>
                        </MultiBinding>
                    </DataGridTextColumn.Binding>
                </DataGridTextColumn>
                <DataGridTextColumn Header="R/W" MinWidth="30" Width="*">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding AddressFirst,Converter={StaticResource addrAckConverter},ConverterParameter=2}" Value="0">
                                    <Setter Property="Text" Value="WR"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding AddressFirst,Converter={StaticResource addrAckConverter},ConverterParameter=2}" Value="1">
                                    <Setter Property="Text" Value="RD"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="A/N" Width="2*" MinWidth="40" Binding="{Binding AckAddr,Converter={StaticResource addrAckConverter},ConverterParameter=3}"/>
                <DataGridTemplateColumn Header="Data" MinWidth="70" Width="3*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Expander Template="{StaticResource StretchyExpanderTemp}"  Expanded="Expander_Expanded" Collapsed="Expander_Collapsed">
                                    <Expander.Style>
                                        <Style TargetType="{x:Type Expander}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding DataBytes.Count}" Value="0">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Expander.Style>
                                    <Expander.Header>
                                        <TextBlock x:Name="header" Text="{Binding DataBytes[0], TargetNullValue='-', Converter={StaticResource decimalToHexConverter}}">
                                        </TextBlock>
                                    </Expander.Header>
                                </Expander>
                                <TextBlock Text="-" VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding DataBytes.Count}" Value="0">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="Frequency" MinWidth="70" Width="3*" Binding="{Binding Frequency, Converter={StaticResource frequencyConverter}}"/>
                <DataGridTextColumn Header="Error" Width="2*"  Binding="{Binding ErrorType}"/>
            </DataGrid.Columns>
            <DataGrid.ContextMenu>
                <ContextMenu Name="MarkerPlacement" StaysOpen="True" >
                    <MenuItem Header="Goto Trigger position" Command="{Binding GotoTrigger}"/>
                </ContextMenu>
            </DataGrid.ContextMenu>
        </DataGrid>
    </Grid>
</UserControl>