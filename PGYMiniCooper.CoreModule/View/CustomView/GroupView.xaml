<UserControl x:Class="PGYMiniCooper.CoreModule.View.CustomView.GroupView"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
           xmlns:conv="clr-namespace:PGYMiniCooper.CoreModule.View.Converters"
             xmlns:fconv="clr-namespace:ProdigyFramework.Converters;assembly=ProdigyFramework"
             xmlns:customview="clr-namespace:PGYMiniCooper.CoreModule.View.CustomView"
             xmlns:viewmodel="clr-namespace:PGYMiniCooper.CoreModule.ViewModel"
             xmlns:vm="clr-namespace:PGYMiniCooper.DataModule.Structure;assembly=PGYMiniCooper.DataModule"
             xmlns:dm="clr-namespace:PGYMiniCooper.DataModule;assembly=PGYMiniCooper.DataModule"
             xmlns:fTemplates="clr-namespace:ProdigyFramework.TemplateSelector;assembly=ProdigyFramework"
             d:DataContext="{d:DesignInstance Type=viewmodel:ConfigurationViewModel}"
             xmlns:dmi="clr-namespace:PGYMiniCooper.DataModule.Interface;assembly=PGYMiniCooper.DataModule"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>


        <fconv:EnumToBooleanConverter x:Key="enumToBooleanConverter" />
        <conv:EnumToBooleanReturnDefaultConverter x:Key="channelEnumToBooleanConverter" DefaultValueWhenFalse="{x:Static dm:eChannles.None}" />
        <conv:MultiValueStringConverter x:Key="multiValueStringConverter" />

        <Style TargetType="ListBox">
            <Setter Property="Margin" Value="20,0,0,0" />
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Focusable" Value="True"/>
        </Style>


        <Style TargetType="customview:RadioButtonWithAvailabilityGroup">

            <Setter Property="Cursor" Value="Hand"></Setter>
            <Setter Property="Content" Value=""></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type customview:RadioButtonWithAvailabilityGroup}">
                        <Grid>

                            <Ellipse x:Name="outerEllipse" Width="22" Height="22" >
                                <Ellipse.Fill>
                                    <RadialGradientBrush >
                                        <GradientStop Offset="0" Color="#b0bec5"/>
                                        <GradientStop Offset="0.88" Color="#b0bec5"/>
                                        <GradientStop Offset="1" Color="#b0bec5"/>
                                    </RadialGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>

                            <Ellipse Width="18" Height="18">
                                <Ellipse.Fill>
                                    <RadialGradientBrush>
                                        <GradientStop Offset="1" Color="White"/>
                                    </RadialGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                            <Ellipse x:Name="highlightCircle" Width="10" Height="10">
                                <Ellipse.Fill >
                                    <LinearGradientBrush >
                                        <GradientStop Offset="1" Color="Green"/>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                            <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="highlightCircle" Property="Fill">
                                    <Setter.Value>
                                        <LinearGradientBrush>
                                            <GradientStop Offset="1" Color="#03a9f4"/>
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="outerEllipse" Property="Fill">
                                    <Setter.Value>
                                        <RadialGradientBrush>
                                            <GradientStop Offset="1" Color="#03a9f4"/>
                                        </RadialGradientBrush>

                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="highlightCircle" Property="Fill">
                                    <Setter.Value>
                                        <LinearGradientBrush StartPoint="0.3,0" EndPoint="0.7,1">
                                            <GradientStop Offset="0" Color="#b0bec5"/>
                                            <GradientStop Offset="0.5" Color="#b0bec5"/>
                                            <GradientStop Offset="1" Color="#b0bec5"/>
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

    </UserControl.Resources>
    <Grid >
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <customview:ChannelHeader x:Name="channelHeader" Margin="182,0,0,0" DataContext="{Binding ChannelList}" />
        <ItemsControl Grid.Row="1" ItemsSource="{Binding ProtocolConfiguration}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Vertical"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplateSelector>
                <fTemplates:InlineDataTemplateSelector>
                    <fTemplates:InlineDataTemplateSelector.DataTemplates>

                        <DataTemplate DataType="{x:Type viewmodel:ConfigViewModel_Group}">
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <Border BorderBrush="#03a9f4" Background="#03a9f4" CornerRadius="5" Height="92" Width="auto" Margin="20,5,10,5" VerticalAlignment="Center">
                                    <Label Foreground="White" FontWeight="SemiBold" FontSize="10" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Margin="5,5,5,5">
                                        <Label.Style>
                                            <Style TargetType="Label">
                                                <Setter Property="Content" Value="CLK 1 ASNMNT"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Config.GeneralPurposeMode, Converter={StaticResource EnumToBooleanConverter},ConverterParameter='Timing'}" Value="True">
                                                        <Setter Property="Content" Value="ASNMNT 1" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                        <Label.LayoutTransform>
                                            <RotateTransform Angle="270"/>
                                        </Label.LayoutTransform>
                                    </Label>
                                </Border>
                                <Border Margin="5" MinWidth="600" >
                                    <ItemsControl ItemsSource="{Binding Channels}" DataContextChanged="ItemsControl_DataContextChanged">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Vertical"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate DataType="{x:Type dmi:ChannelInfo}">
                                                <StackPanel Orientation="Horizontal" >
                                                    <customview:ChannelLabel Text="{Binding ChannelName, Mode=OneWay}" />
                                                    <ListBox ItemsSource="{Binding ElementName=channelHeader, Path=DataContext}" Margin="10,0"  >

                                                        <ListBox.ItemsPanel>
                                                            <ItemsPanelTemplate>
                                                                <StackPanel Orientation="Horizontal"/>
                                                            </ItemsPanelTemplate>
                                                        </ListBox.ItemsPanel>
                                                        <ListBox.ItemTemplate>
                                                            <DataTemplate>
                                                                <customview:RadioButtonWithAvailabilityGroup Margin="9,0" IsAvailable="{Binding IsAvailable, Mode=TwoWay}" 
                                                                                                     GroupName="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=DataContext.ChannelName}" >
                                                                    <customview:RadioButtonWithAvailabilityGroup.IsChecked>
                                                                        <conv:ConverterBindableParameter Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=DataContext.ChannelIndex}"
                                                                                                             Converter="{StaticResource channelEnumToBooleanConverter}"
                                                                                                             ConverterParameter="{Binding Channel}" />

                                                                    </customview:RadioButtonWithAvailabilityGroup.IsChecked>
                                                                </customview:RadioButtonWithAvailabilityGroup>
                                                            </DataTemplate>
                                                        </ListBox.ItemTemplate>

                                                    </ListBox>
                                                </StackPanel>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </Border>

                            </StackPanel>
                        </DataTemplate>

                    </fTemplates:InlineDataTemplateSelector.DataTemplates>
                </fTemplates:InlineDataTemplateSelector>
            </ItemsControl.ItemTemplateSelector>
        </ItemsControl>
    </Grid>
</UserControl>
